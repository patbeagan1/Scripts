#!/bin/bash
file=""

function usage {
	echo '
	-h display this help text
	-g <language> generate starter code
	 	c
		cpp
		c# (cs)
		java
		python(2|3)
		perl
		bash
		haskell
		node
	-e <language> starting setup of the language environment
	'
}

openedit () {
	if command -v nano >/dev/null 2>&1; then nano $file;
	elif command -v vi >/dev/null 2>&1; then vi $file;
	fi
}

#==================================
helloc () {
echo '
/************************
*                       *
* Hello World in C      *
* Authored by:          *
*                       *
************************/

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  puts("Hello World!");
  return EXIT_SUCCESS;
}
' >> main.c
file=main.c
openedit
}
#==================================
hellocpp () {
echo '
/***************************
*                          *
* Hello World in ISO C++   *
* Authored by:             *
*                          *
***************************/

#include <iostream>

using namespace std;

int main()
{
    cout << "Hello World";
    system("pause");
    return 0;
}
' >> main.cpp
file=main.cpp
openedit
}
#==================================
hellocs () {
echo '
/************************
*                       *
* Hello World in C#     *
* Authored by:          *
*                       *
************************/

class HelloWorld
{
    static void Main()
    {
        System.Console.WriteLine("Hello, World!");
    }
}' >> main.cs
file=main.cs
openedit
}
#==================================
hellojava () {
echo '
/************************
*                       *
* Hello World in Java   *
* Authored by:          *
*                       *
************************/

class HelloWorld {
  static public void main( String args[] ) {
    System.out.println( "Hello World!" );
  }
}
' >> main.java
file=main.java
openedit
}
#==================================
hellopy2 () {
echo '
#!/usr/bin/python
#===========================#
# Hello world in Python 2   #
# Authored by:              #
#===========================#

print "Hello World"

' >> main.py
file=main.py
openedit
}
#==================================
hellopy3 () {
echo '
#!/usr/bin/python3
#===========================================#
# Hello world in Python 3 (aka Python 3000) #
# Authored by:                              #
#===========================================#

print("Hello World")

' >> main.py
file=main.py
openedit
}
#==================================
helloperl () {
echo '
#!/usr/bin/perl
#==========================#
# Hello world in perl      #
# Authored by:             #
#==========================#

print "Hello World!\n";

' >> main.pl
file=main.pl
openedit
}
#==================================
hellobash  () {
echo '
#!/bin/bash
#==========================#
# Hello world in bash      #
# Authored by:             #
#==========================#

echo hello world

' >> main.sh
file=main.sh
openedit
}
#==================================
hellonode  () {
echo '
// Load the http module to create an http server.
var http = require('http');

// Configure our HTTP server to respond with Hello World to all requests.
var server = http.createServer(function (request, response) {
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.end("Hello World\n");
});

// Listen on port 8000, IP defaults to 127.0.0.1
server.listen(8000);

// Put a friendly message on the terminal
console.log("Server running at http://127.0.0.1:8000/");
' >> main.js
file=main.js
openedit
}

hellohs () {
echo '
--------------------------
-- Hello World in Haskell
-- Authored by:
--------------------------

main = putStrLn "Hello World"

' >> main.hs
file=main.hs
openedit
}

#==================================
case $1 in
	-h)
		usage
	;;
	-g)    case $2 in
		c)	helloc
		;;
		cpp)   hellocpp
		;;
		c#)	hellocs
		;;
		java)   hellojava
		;;
		python2) hellopy2
		;;
		python3) hellopy3
		;;
		perl)   helloperl
		;;
		bash)   hellobash
		;;
		node)	hellonode
		;;
		haskell) hellohs
		;;
		*) echo Unrecognized language. Use -h for details.
		;;
		esac
	;;
	*) echo Missing required argument. Use -h for details.
	;;
esac

